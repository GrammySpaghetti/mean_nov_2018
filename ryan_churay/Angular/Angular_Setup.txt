SETTING UP A NEW ANGULAR PROJECT INSIDE OF AND EXPRESS PROJECT

To run the project in the terminal make sure mongod is running, ng build --watch, and the nodemon server.js is running

npm install -g @angular/cli (installs angular globally on your machine)

Navigate to your express project
ng new public (creates a new angular app)

Navigate to your angular project root
ng build --watch

In the express server.js file make sure the static is pointed to the angular app
app.use(express.static( __dirname + '/public/dist/public' ));

Navigate to the angular app and set up service in the terminal with:
ng g s http

Register the service by making the connections among the app components
.../app.app.module.ts
import { HttpService } from './http.service';
in the @NgModule add HttpService to the providers array

HttpClient connections
.../app/app.module.ts
import { HttpClientModule } from '@angular/common/http';
in the @NgModule add HttpClientModule to the imports array

Dependency Injection
.../app/http.service.ts
import { HttpClient } from '@angular/common/http';
export class HttpService{
    constructor(private _http: HttpClient){}
}

.../app/app.component.ts
import { HttpService } from './http.service';
export class AppComponent{
    title = 'app'
    constructor(private _httpService: HttpService){}
}

To generate a component with the CLI navigate to angular project and run the following command in the terminal
ng generate component component_name

...src/app/task/task.component.ts
@Component({
  selector: 'app-task',
  templateUrl: './task.component.html',
  styleUrls: ['./task.component.css']
})
the selector may be used as a tag within the html of a parent component
<app-task></app-task>

...src/app/app.component.html
<h1>Restful Tasks API</h1>
<button (click)="getTasksFromService()">Get all tasks</button>
<div *ngFor="let task of tasks">
    <p>{{task.title}}</p>
    <button (click)="taskToShow(task)">Show</button>  <!-- In this example, the taskToShow method is saving the selected task as selectedTask -->
</div>
<!-- Nest the task component and bind its taskToShow to the selectedTask in the root component  -->
<app-task *ngIf="selectedTask" [taskToShow]="selectedTask"></app-task>

...src/app/task/task.component.ts
import { Component, OnInit, Input } from '@angular/core'; // add Input to our imports
@Component({
  selector: 'app-task',
  templateUrl: './task.component.html',
  stylesUrls: ['./task.component.css']
})
export class TaskComponent implements OnInit {
  @Input() taskToShow: any;  // use the @Input decorator to indicate this comes from the parent
  constructor() { }
  ngOninit() { }
}

...src/app/task/task.component.html
<h6>{{taskToShow.title}}</h6>
<p>{{taskToShow.description}}</p>

<p *ngIf="loggedIn">You are logged in!</p>
<p *ngFor="let snack of snacks">{{snack}}</p>
<p *ngIf="snacks.length < 3">You need more snacks.</p>
